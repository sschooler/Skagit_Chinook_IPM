

model {
  
  ##--------
  ## PRIORS
  ##--------
  ## Note: the term E means expected value of the true state ###
  
  ## freshwater (adult-smolt) productivity (pas)
  pas <- exp(mu_pas)
  mu_pas ~ dunif(0, 8)

  ## marine (smolt-adult) productivity (psa)
  psa <- exp(mu_R_psa)
  mu_R_psa ~ dunif(-10, 0)

  ## marine density dependence (beta)
  beta ~ dunif(0, .1)
  
  ## observation variance for spawners
  sigma_sp ~ dunif(0, 10)
  tau_sp <- 1/sigma_sp;

  ## process variance for smolts
  sigma_pas ~ dunif(0, 10)
  tau_pas <- 1/sigma_pas;
  
  ## process variance for spawners
  sigma_psa ~ dunif(0, 10)
  tau_psa <- 1/sigma_psa
  
  ## observation variance for smolts
  sigma_sm ~ dunif(0, 10) 
  tau_sm <- 1/sigma_sm;

  ## unprojectable early recruits;
  ## hyper mean across all popns
  Rec_mu ~ dnorm(0, 0.001) 
  ## hyper SD across all popns
  Rec_sig ~ dunif(0,100);
  ## precision across all popns
  Rec_tau <- pow(Rec_sig,-2);
  ## multipliers for unobservable total runs
	ttl_run_mu ~ dunif(1,5);
	ttl_run_tau ~ dunif(1,20);

  ## get total cal yr returns for first age_min yrs
  for(i in 1:age_min) {
		ln_tot_Run[i] ~ dnorm(ttl_run_mu*Rec_mu,Rec_tau/ttl_run_tau);
		tot_Run[i] <- exp(ln_tot_Run[i]);
  }
  
  ## maturity schedule
  ## uniform vector for Dirichlet prior
  theta <- c(.2,.2,.2,.2)
  ## hyper-mean for maturity
  pi_eta ~ ddirch(theta);
  ## hyper-prec for maturity
  pi_tau ~ dnorm(0, 0.01) T(0,);
  for(t in 1:(n_yrs-age_min)) { pi_vec[t,1:A] ~ ddirch(pi_eta*pi_tau) }
  
  ## estimated harvest rate
  for(t in 1:(n_yrs)) { h_rate[t] ~ dunif(0,1) }
  av_hrate <- mean(h_rate)

  ##------------
  ## LIKELIHOOD
  ##------------
  ## Marine productivity (smolt-adult) model as ricker density dependence
  
  ## brood years 1:(n_yrs-age_min)
  for(t in 1:(n_yrs-age_min)) {
    ## brood-yr recruits by age
    for(a in 1:A) {
      Rec[t,a] <- tot_Rec[t] * pi_vec[t,a];
    }
    
    ln_R_psa[t] ~ dnorm(mu_R_psa, tau_psa) ;
    E_ln_Rec[t] <- E_ln_smolt[t] + ln_R_psa[t] - beta*smolt[t];
    tot_ln_Rec[t] ~ dnorm(E_ln_Rec[t], tau_psa)
    res_ln_Rec[t] <- tot_ln_Rec[t] - E_ln_Rec[t];
    ## median of total recruits
    tot_Rec[t] <- exp(tot_ln_Rec[t]);
  
    # for posterior check
    tot_ln_Rec_new[t] ~  dnorm(E_ln_Rec[t], tau_psa)
    res_ln_Rec_new[t] <-  tot_ln_Rec_new[t] - E_ln_Rec[t];

  } ## end t loop over year
  
  # sums for Bayesian p-value
  fit_lnRec <- sum(res_ln_Rec[])
  fit.new_lnRec <- sum(res_ln_Rec_new[])
  
  ## get predicted calendar year returns by age
  ## matrix Run has dim [(n_yrs-age_min) x A]
  ## incomplete early broods
  ## first cal yr of this grp is first brood yr + age_min
  for(i in 1:(age_max-age_min)) {
    ## projected recruits
    for(a in 1:(i)) {
      Run[i,a] <- Rec[(i)-a+1,a];
    }
    ## imputed recruits
    for(a in (i+1):A) {
      lnRec[i,a] ~ dnorm(Rec_mu,Rec_tau);
      Run[i,a] <- exp(lnRec[i,a]);
    }
    ## total run size
    tot_Run[i+age_min] <- sum(Run[i,1:A]);
    ## predicted age-prop vec for multinomial
    for(a in 1:A) {
      age_v[i,a] <- Run[i,a] / tot_Run[i+age_min];
    }
    ## multinomial for age comp
    dat_age[i,1:A] ~ dmulti(age_v[i,1:A],dat_age[i,A+1]);
  }
  
  ## info from complete broods
  ## first cal yr of this grp is first brood yr + age_max
  for(i in (A):(n_yrs-age_min)) {
    for(a in 1:A) {
      Run[i,a] <- Rec[(i)-a+1,a];
    }
    ## total run size
    tot_Run[i+age_min] <- sum(Run[i,1:A]);
    ## predicted age-prop vec for multinom
    for(a in 1:A) {
      age_v[i,a] <- Run[i,a] / tot_Run[i+age_min];
    }
    ## multinomial for age comp
    dat_age[i,1:A] ~ dmulti(age_v[i,1:A],dat_age[i,A+1]);
  }
  
  ## freshwater productivity
  ## first cal yr is first brood yr
  for(t in 1:(n_yrs)) {
    # estimating spawners
    est_harv[t] = h_rate[t] * tot_Run[t];
    dat_harv[t] ~ dlnorm(log(est_harv[t]), 20);
    Sp[t] = tot_Run[t] - est_harv[t];
    ln_Sp[t] <- log(Sp[t]);
    ln_dat_esc[t] ~ dnorm(ln_Sp[t], tau_sp);

    ## process model for smolts with normally distributed error
    ln_pas[t] ~ dnorm(mu_pas, tau_pas); # process error
    E_ln_smolt[t] <- ln_pas[t] + ln_Sp[t] 
    smolt[t] <- exp(E_ln_smolt[t])
    
    ## observation  model for smolt production
    ln_dat_smolt[t] ~ dnorm(E_ln_smolt[t], tau_sm);
    
    # model predictive check for Bayesian p-value
    res_ln_smolt[t] <- ln_dat_smolt[t] - E_ln_smolt[t];
    ln_dat_smolt_new[t] ~  dnorm(E_ln_smolt[t], tau_sm)
    res_ln_smolt_new[t] <-ln_dat_smolt_new[t] - E_ln_smolt[t];
    
  }
  
  # Summary for fit statistics
  fit_lnSmolt <- sum(res_ln_smolt[])
  fit.new_lnSmolt <- sum(res_ln_smolt_new[])
    
  
} ## end model description

